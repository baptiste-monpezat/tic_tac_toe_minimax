{"version":3,"sources":["index.js"],"names":["Square","value","onClick","className","Restart","Board","column_numbers","useState","Array","fill","squares","setsquares","isNext","setIsNext","winner","calculateWinner","nextSymbol","index","move","bestScore","Infinity","i","length","score","minimax","bestMove","slice","renderSquare","columns","row_numbers","map","column_index","key","toString","isBoardFull","possibleLines","a","b","c","depth","alpha","beta","isMaximizer","result","Math","max","min","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.df274294.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"./index.css\";\n\n\nfunction Square({value,onClick}){\n\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Restart({onClick}){\n\n  return (\n    <button className=\"restart\" onClick={onClick}>\n      Play Again ! \n    </button>\n  );\n}\n\nfunction Board({column_numbers}){\n\n  const [squares,setsquares] = useState(Array(9).fill(null))\n  const [isNext,setIsNext] = useState(true);\n  const winner = calculateWinner(squares);\n  const nextSymbol = isNext ? \"X\" : \"O\";\n\n\n  if (nextSymbol===\"O\" && winner == null){\n    const nextSquares = squares.slice()\n    let index = bestMove(nextSquares) \n    squares[index] = nextSymbol\n    setsquares(squares)\n    setIsNext(!isNext)\n\n  }\n\n  function getStatus(){\n    if (winner){\n      return \"Winner: \" + winner;\n    }\n    else if(isBoardFull(squares)){\n      return \"Draw\"\n    }\n\n  }\n\n  function renderSquare(i){\n\n    return <Square value={squares[i]} onClick={()=>{\n        //const nextSquares = squares.slice();\n        if (squares[i] == null && winner == null){\n          squares[i]= nextSymbol;\n          setsquares(squares)\n          setIsNext(!isNext)\n        }\n\n      }}\n    />\n   \n  };\n\n  function renderRestartButton(){\n\n    return <Restart onClick={()=>{\n\n        setsquares(Array(9).fill(null));\n        setIsNext(true);\n\n      }\n    }\n    />\n  }\n  \n\n  const columns = row_numbers.map((column_index) =>\n      <div key={column_index.toString()} className=\"board-row\">\n        {renderSquare(column_index)}\n        {renderSquare(column_index+1)}\n        {renderSquare(column_index+2)}\n      </div>\n  );\n\n\n  return(\n\n    <div className=\"container\">\n      <div className=\"game\">\n        <div className=\"game-board\">\n          {columns}\n        </div>\n        <div className=\"game-info\">{getStatus()}</div>\n        <div className=\"restart-button\">{renderRestartButton()}</div>\n\n      </div>\n    </div>\n\n  );\n\n}\n\nfunction calculateWinner(squares){\n\n  const possibleLines = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [2,4,6]\n  ]\n\n\n  for(let i=0;i<possibleLines.length;i++){\n    const [a,b,c] = possibleLines[i];\n\n    if(squares[a] && squares[a]===squares[b] && squares[a]===squares[c]){\n      return squares[a];\n    }\n\n  }\n  return null;\n}\n\n\nfunction isBoardFull(squares){\n\n  for(let i=0;i<squares.length;i++){\n    if(squares[i]==null){\n      return false;\n    }\n  }\n  return true;\n}\n\n\nfunction bestMove(squares){\n  let bestScore = -Infinity;\n  let move;\n\n  for(let i=0;i<squares.length;i++){\n    if(squares[i]==null){\n      squares[i]=\"O\"\n\n      let score = minimax(squares,0,-Infinity,Infinity,false);\n      squares[i] = null;\n      \n      if(score>bestScore){\n        bestScore = score\n        move = i\n      }\n    }\n  }\n  return move\n\n}\n\n\nfunction minimax(squares,depth,alpha,beta,isMaximizer){\n\n  let scores = {\n    \"X\":-1,\n    \"O\":1\n  }\n\n  let result = calculateWinner(squares);\n  if(result!=null){\n    return scores[result];\n  }\n  else if(isBoardFull(squares)){\n    return 0\n  }\n\n  if(isMaximizer){\n    let bestScore= -Infinity\n    for(let i=0;i<squares.length;i++){\n      if(squares[i]==null){\n        squares[i]=\"O\";\n        let score = minimax(squares,depth+1,alpha,beta,false);\n        squares[i]=null;\n        bestScore = Math.max(score,bestScore);\n        alpha = Math.max(alpha,score);\n        if(beta<alpha){\n          break;\n        }\n      }\n    }\n  return bestScore\n  }\n  else{\n    let bestScore= Infinity\n    for(let i=0;i<squares.length;i++){\n      if(squares[i]==null){\n        squares[i]=\"X\";\n        let score = minimax(squares,depth+1,alpha,beta,true)\n        squares[i]=null;\n        bestScore = Math.min(score,bestScore);\n        beta = Math.min(beta,score);\n        if(beta<alpha){\n          break;\n        }\n      }\n    }\n  return bestScore\n  }\n\n}\n\n\n\nconst row_numbers = [0,3,6];\nReactDom.render(<Board row_numbers={row_numbers}/>,document.getElementById(\"root\"));"],"sourceRoot":""}