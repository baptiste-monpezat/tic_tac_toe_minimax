{"version":3,"sources":["minimax/minimax.js","index.js"],"names":["calculateWinner","squares","possibleLines","i","length","a","b","c","isBoardFull","minimax","depth","level","alpha","beta","isMaximizer","result","bestScore","Infinity","score","Math","max","min","Square","value","onClick","className","Restart","Level","selected","Board","column_numbers","useState","Array","fill","setsquares","isNext","setIsNext","setLevel","winner","nextSymbol","index","move","availableMove","randomMoveChoice","randomMove","random","push","console","log","bestMove","slice","renderSquare","columns","row_numbers","map","column_index","key","toString","levels","renderLevelButton","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.307152b7.chunk.js","sourcesContent":["export function calculateWinner(squares){\n\n    const possibleLines = [\n        [0,1,2],\n        [3,4,5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6]\n    ]\n    \n    \n    for(let i=0;i<possibleLines.length;i++){\n        const [a,b,c] = possibleLines[i];\n    \n        if(squares[a] && squares[a]===squares[b] && squares[a]===squares[c]){\n        return squares[a];\n        }\n    \n    }\n    return null;\n    }\n    \n    \nexport function isBoardFull(squares){\n\nfor(let i=0;i<squares.length;i++){\n    if(squares[i]==null){\n    return false;\n    }\n}\nreturn true;\n}\n      \n\nexport function minimax(squares,depth,level,alpha,beta,isMaximizer){\n\n    let scores = {\n      \"X\":-1,\n      \"O\":1\n    }\n\n  \n    let result = calculateWinner(squares);\n    if(result!=null){\n      return scores[result];\n    }\n    else if(isBoardFull(squares)){\n      return 0\n    }\n\n    if(isMaximizer){\n        let bestScore= -Infinity\n        for(let i=0;i<squares.length;i++){\n            if(squares[i]==null){\n                squares[i]=\"O\";\n                let score = minimax(squares,depth+1,level,alpha,beta,false);\n                squares[i]=null;\n                bestScore = Math.max(score,bestScore);\n                alpha = Math.max(alpha,score);\n            if(beta<alpha){\n                break;\n            }\n            }\n        }\n        return bestScore\n    }\n    else{\n    let bestScore= Infinity\n    for(let i=0;i<squares.length;i++){\n        if(squares[i]==null){\n        squares[i]=\"X\";\n        let score = minimax(squares,depth+1,level,alpha,beta,true)\n        squares[i]=null;\n        bestScore = Math.min(score,bestScore);\n        beta = Math.min(beta,score);\n        if(beta<alpha){\n            break;\n        }\n          \n     }\n    }\n    return bestScore\n  }\n}\n\nexport function bestMove(squares,level){\n    let bestScore = -Infinity;\n    let move;\n    var availableMove = [];\n    var randomMoveChoice = [true,false,false,false,true,false];\n\n    let randomMove = randomMoveChoice[randomMoveChoice.length*Math.random()<<0]\n\n\n\n    if(level===\"easy\" ||(level===\"medium\" && randomMove)){\n\n        for(let i=0;i<squares.length;i++){\n            if(squares[i]==null){\n                availableMove.push(i);\n                \n            }\n        }\n        console.log(\"coucou\");\n\n        return availableMove[availableMove.length*Math.random()<<0]\n\n\n    }\n    else{\n        for(let i=0;i<squares.length;i++){\n            if(squares[i]==null){\n            squares[i]=\"O\"\n            let score = minimax(squares,0,level,-Infinity,Infinity,false);\n            squares[i] = null;\n    \n            if(score>bestScore){\n                bestScore = score\n                move = i\n            }\n                }\n        }\n\n    }\n\n\n    return move\n\n    }\n\n","import React, { useState } from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"./index.css\";\nimport {bestMove,isBoardFull,calculateWinner} from \"./minimax/minimax.js\"\n\n\nfunction Square({value,onClick}){\n\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Restart({onClick}){\n\n  return (\n    <button className=\"restart\" onClick={onClick}>\n      Play Again ! \n    </button>\n  );\n}\n\nfunction Level({value,selected,onClick}){\n  return (\n  <button className={value===selected ? 'level selected':'level'}  onClick={onClick}>\n    {value}\n  </button>\n  );\n}\n\nfunction Board({column_numbers}){\n\n  const [squares,setsquares] = useState(Array(9).fill(null))\n  const [isNext,setIsNext] = useState(true);\n  const [level,setLevel] = useState(\"easy\");\n  const winner = calculateWinner(squares);\n  const nextSymbol = isNext ? \"X\" : \"O\";\n\n\n  if (nextSymbol===\"O\" && winner == null){\n    const nextSquares = squares.slice()\n    let index = bestMove(nextSquares,level) \n    squares[index] = nextSymbol\n    setsquares(squares)\n    setIsNext(!isNext)\n\n  }\n\n  function getStatus(){\n    if (winner){\n      return \"Winner: \" + winner;\n    }\n    else if(isBoardFull(squares)){\n      return \"Draw\"\n    }\n\n  }\n\n  function renderSquare(i){\n\n    return <Square value={squares[i]} onClick={()=>{\n        //const nextSquares = squares.slice();\n        if (squares[i] == null && winner == null){\n          squares[i]= nextSymbol;\n          setsquares(squares)\n          setIsNext(!isNext)\n        }\n\n      }}\n    />\n   \n  };\n\n  function renderRestartButton(){\n\n    return <Restart onClick={()=>{\n\n        setsquares(Array(9).fill(null));\n        setIsNext(true);\n\n      }\n    }\n    />\n  }\n\n  function renderLevelButton(key,value,level){\n\n    return <Level key={key} value={value} selected={level} onClick={()=>{\n        setLevel(value);\n      }\n    }\n    />\n  }\n  \n\n  const columns = row_numbers.map((column_index) =>\n      <div key={column_index.toString()} className=\"board-row\">\n        {renderSquare(column_index)}\n        {renderSquare(column_index+1)}\n        {renderSquare(column_index+2)}\n      </div>\n  );\n\n  const levels = [\"easy\",\"medium\",\"hard\"].map((column_index) => \n    renderLevelButton(column_index,column_index,level)\n  );\n\n\n  return(\n\n    <div className=\"container\">\n\n      <div className=\"game\">\n        <div className=\"game-board\">\n          {columns}\n        </div>\n        <div className=\"game-info\">{getStatus()}</div>\n        <div className=\"levels-button\">{levels}</div>\n        <div className=\"restart-button\">{renderRestartButton()}</div>\n\n      </div>\n\n\n    </div>\n\n  );\n\n}\n\n\n\n\nconst row_numbers = [0,3,6];\nReactDom.render(<Board row_numbers={row_numbers}/>,document.getElementById(\"root\"));"],"sourceRoot":""}